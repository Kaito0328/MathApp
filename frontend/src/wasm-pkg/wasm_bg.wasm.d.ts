/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export const __wbg_matrixf64_free: (a: number, b: number) => void;
export const matrixf64_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const matrixf64_with_default: (a: number, b: number) => number;
export const matrixf64_zeros: (a: number, b: number) => number;
export const matrixf64_identity: (a: number) => number;
export const matrixf64_transpose: (a: number) => number;
export const matrixf64_trace: (a: number) => [number, number, number];
export const matrixf64_determinant: (a: number) => [number, number, number];
export const matrixf64_rank: (a: number) => [number, number, number];
export const matrixf64_inverse: (a: number) => number;
export const matrixf64_frobenius_norm: (a: number) => number;
export const matrixf64_expm: (a: number) => number;
export const matrixf64_qr_decomposition: (a: number) => [number, number, number];
export const matrixf64_svd: (a: number) => [number, number, number];
export const matrixf64_eigen_decomposition: (a: number) => [number, number, number];
export const matrixf64_cholesky: (a: number) => [number, number, number];
export const matrixf64_pinv: (a: number) => [number, number, number];
export const matrixf64_add: (a: number, b: number) => number;
export const matrixf64_sub: (a: number, b: number) => number;
export const matrixf64_mul: (a: number, b: number) => number;
export const __wbg_vectorf64_free: (a: number, b: number) => void;
export const vectorf64_new: (a: number, b: number) => number;
export const vectorf64_zeros: (a: number) => number;
export const vectorf64_ones: (a: number) => number;
export const vectorf64_dim: (a: number) => number;
export const vectorf64_is_empty: (a: number) => number;
export const vectorf64_dot: (a: number, b: number) => number;
export const vectorf64_argmax: (a: number) => number;
export const vectorf64_argmin: (a: number) => number;
export const vectorf64_max: (a: number) => [number, number];
export const vectorf64_min: (a: number) => [number, number];
export const vectorf64_norm: (a: number) => number;
export const vectorf64_normalize: (a: number) => number;
export const vectorf64_cosine_similarity: (a: number, b: number) => number;
export const vectorf64_mean: (a: number) => [number, number];
export const vectorf64_std: (a: number) => number;
export const vectorf64_linspace: (a: number, b: number, c: number) => [number, number, number];
export const vectorf64_add: (a: number, b: number) => number;
export const vectorf64_sub: (a: number, b: number) => number;
export const vectorf64_mul: (a: number, b: number) => number;
export const vectorf64_sum: (a: number) => number;
export const vectorf64_multiply_matrix: (a: number, b: number) => [number, number, number];
export const matrixf64_get: (a: number, b: number, c: number) => number;
export const matrixf64_row: (a: number, b: number) => number;
export const matrixf64_col: (a: number, b: number) => number;
export const matrixf64_multiply_vector: (a: number, b: number) => number;
export const matrixf64_diagonal: (a: number) => number;
export const matrixf64_solve: (a: number, b: number) => number;
export const matrixf64_data: (a: number) => [number, number];
export const vectorf64_transpose: (a: number) => number;
export const vectorf64_to_column_matrix: (a: number) => number;
export const vectorf64_to_row_matrix: (a: number) => number;
export const vectorf64_data: (a: number) => [number, number];
export const __wbg_matrixf32_free: (a: number, b: number) => void;
export const matrixf32_add: (a: number, b: number) => number;
export const matrixf32_sub: (a: number, b: number) => number;
export const matrixf32_mul: (a: number, b: number) => number;
export const matrixf32_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const matrixf32_with_default: (a: number, b: number) => number;
export const matrixf32_zeros: (a: number, b: number) => number;
export const matrixf32_identity: (a: number) => number;
export const matrixf32_rows: (a: number) => number;
export const matrixf32_cols: (a: number) => number;
export const matrixf32_is_square: (a: number) => number;
export const matrixf32_transpose: (a: number) => number;
export const matrixf32_trace: (a: number) => [number, number, number];
export const matrixf32_determinant: (a: number) => [number, number, number];
export const matrixf32_rank: (a: number) => [number, number, number];
export const matrixf32_inverse: (a: number) => number;
export const matrixf32_data: (a: number) => [number, number];
export const __wbg_vectorf32_free: (a: number, b: number) => void;
export const vectorf32_add: (a: number, b: number) => number;
export const vectorf32_sub: (a: number, b: number) => number;
export const vectorf32_mul: (a: number, b: number) => number;
export const vectorf32_new: (a: number, b: number) => number;
export const vectorf32_zeros: (a: number) => number;
export const vectorf32_ones: (a: number) => number;
export const vectorf32_dim: (a: number) => number;
export const vectorf32_is_empty: (a: number) => number;
export const vectorf32_dot: (a: number, b: number) => number;
export const vectorf32_argmax: (a: number) => number;
export const vectorf32_argmin: (a: number) => number;
export const vectorf32_max: (a: number) => number;
export const vectorf32_min: (a: number) => number;
export const vectorf32_data: (a: number) => [number, number];
export const __wbg_matrixi32_free: (a: number, b: number) => void;
export const matrixi32_add: (a: number, b: number) => number;
export const matrixi32_sub: (a: number, b: number) => number;
export const matrixi32_mul: (a: number, b: number) => number;
export const matrixi32_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const matrixi32_identity: (a: number) => number;
export const matrixi32_transpose: (a: number) => number;
export const matrixi32_trace: (a: number) => [number, number, number];
export const matrixi32_data: (a: number) => [number, number];
export const __wbg_vectori32_free: (a: number, b: number) => void;
export const vectori32_add: (a: number, b: number) => number;
export const vectori32_sub: (a: number, b: number) => number;
export const vectori32_mul: (a: number, b: number) => number;
export const vectori32_ones: (a: number) => number;
export const vectori32_dot: (a: number, b: number) => number;
export const vectori32_argmax: (a: number) => number;
export const vectori32_argmin: (a: number) => number;
export const vectori32_max: (a: number) => number;
export const vectori32_min: (a: number) => number;
export const vectori32_data: (a: number) => [number, number];
export const matrixf64_is_square: (a: number) => number;
export const matrixi32_is_square: (a: number) => number;
export const vectori32_is_empty: (a: number) => number;
export const vectori32_new: (a: number, b: number) => number;
export const matrixf64_columns: (a: number) => number;
export const matrixf64_rows: (a: number) => number;
export const matrixf64_cols: (a: number) => number;
export const matrixf32_columns: (a: number) => number;
export const matrixi32_rows: (a: number) => number;
export const matrixi32_cols: (a: number) => number;
export const matrixi32_columns: (a: number) => number;
export const matrixi32_zeros: (a: number, b: number) => number;
export const matrixi32_with_default: (a: number, b: number) => number;
export const vectorf64_len: (a: number) => number;
export const vectorf32_len: (a: number) => number;
export const vectori32_dim: (a: number) => number;
export const vectori32_len: (a: number) => number;
export const vectori32_zeros: (a: number) => number;
export const __wbg_hamming74_free: (a: number, b: number) => void;
export const wasmhamming74_new: () => number;
export const wasmhamming74_encode: (a: number, b: number, c: number) => [number, number, number, number];
export const __wbg_linearcode_free: (a: number, b: number) => void;
export const linearcode_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const linearcode_encode: (a: number, b: number, c: number) => [number, number, number, number];
export const __wbg_cycliccode_free: (a: number, b: number) => void;
export const cycliccode_new: (a: number, b: number, c: number) => number;
export const cycliccode_encode: (a: number, b: number, c: number) => [number, number, number, number];
export const __wbg_reedsolomon_free: (a: number, b: number) => void;
export const reedsolomon_new: (a: number, b: number, c: number) => [number, number, number];
export const reedsolomon_encode: (a: number, b: number, c: number) => [number, number, number, number];
export const reedsolomon_decode: (a: number, b: number, c: number) => [number, number, number, number];
export const reedsolomon_n: (a: number) => number;
export const reedsolomon_t: (a: number) => number;
export const __wbg_bch_free: (a: number, b: number) => void;
export const bch_new: (a: number, b: number, c: number) => number;
export const bch_encode: (a: number, b: number, c: number) => [number, number, number, number];
export const bch_k: (a: number) => number;
export const bch_n: (a: number) => number;
export const bch_t: (a: number) => number;
export const hammingDistanceGF2: (a: number, b: number, c: number, d: number) => number;
export const weightDistributionGF2: (a: number, b: number, c: number) => [number, number, number, number];
export const __wbg_normal_free: (a: number, b: number) => void;
export const __wbg_uniform_free: (a: number, b: number) => void;
export const uniform_new: (a: number, b: number) => [number, number, number];
export const uniform_mean: (a: number) => number;
export const uniform_variance: (a: number) => number;
export const uniform_std_dev: (a: number) => number;
export const uniform_pdf: (a: number, b: number) => number;
export const uniform_cdf: (a: number, b: number) => number;
export const uniform_quantile: (a: number, b: number) => number;
export const uniform_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_studentt_free: (a: number, b: number) => void;
export const studentt_new: (a: number) => [number, number, number];
export const studentt_mean: (a: number) => number;
export const studentt_variance: (a: number) => number;
export const studentt_std_dev: (a: number) => number;
export const studentt_pdf: (a: number, b: number) => number;
export const studentt_cdf: (a: number, b: number) => number;
export const studentt_quantile: (a: number, b: number) => number;
export const studentt_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_chisquare_free: (a: number, b: number) => void;
export const chisquare_new: (a: number) => [number, number, number];
export const chisquare_k_param: (a: number) => number;
export const chisquare_mean: (a: number) => number;
export const chisquare_variance: (a: number) => number;
export const chisquare_std_dev: (a: number) => number;
export const chisquare_pdf: (a: number, b: number) => number;
export const chisquare_cdf: (a: number, b: number) => number;
export const chisquare_quantile: (a: number, b: number) => number;
export const chisquare_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_f_free: (a: number, b: number) => void;
export const f_new: (a: number, b: number) => [number, number, number];
export const f_d1: (a: number) => number;
export const f_mean: (a: number) => number;
export const f_variance: (a: number) => number;
export const f_std_dev: (a: number) => number;
export const f_pdf: (a: number, b: number) => number;
export const f_cdf: (a: number, b: number) => number;
export const f_quantile: (a: number, b: number) => number;
export const f_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_binomial_free: (a: number, b: number) => void;
export const binomial_new: (a: number, b: number) => [number, number, number];
export const binomial_n: (a: number) => number;
export const binomial_p: (a: number) => number;
export const binomial_mean: (a: number) => number;
export const binomial_variance: (a: number) => number;
export const binomial_std_dev: (a: number) => number;
export const binomial_pmf: (a: number, b: number) => number;
export const binomial_cdf: (a: number, b: number) => number;
export const binomial_quantile: (a: number, b: number) => number;
export const binomial_pmf_svg: (a: number, b: number, c: number) => [number, number];
export const __wbg_categorical_free: (a: number, b: number) => void;
export const categorical_new: (a: number, b: number) => [number, number, number];
export const categorical_probs: (a: number) => [number, number];
export const categorical_pmf: (a: number, b: number) => number;
export const categorical_log_pmf: (a: number, b: number) => number;
export const categorical_cdf: (a: number, b: number) => number;
export const categorical_quantile: (a: number, b: number) => number;
export const categorical_pmf_svg: (a: number, b: number, c: number) => [number, number];
export const normal_new: (a: number, b: number) => [number, number, number];
export const normal_mu: (a: number) => number;
export const normal_sigma: (a: number) => number;
export const normal_variance: (a: number) => number;
export const normal_std_dev: (a: number) => number;
export const normal_pdf: (a: number, b: number) => number;
export const normal_cdf: (a: number, b: number) => number;
export const normal_quantile: (a: number, b: number) => number;
export const normal_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_gamma_free: (a: number, b: number) => void;
export const gamma_new: (a: number, b: number) => [number, number, number];
export const gamma_rate: (a: number) => number;
export const gamma_mean: (a: number) => number;
export const gamma_variance: (a: number) => number;
export const gamma_std_dev: (a: number) => number;
export const gamma_pdf: (a: number, b: number) => number;
export const gamma_cdf: (a: number, b: number) => number;
export const gamma_quantile: (a: number, b: number) => number;
export const gamma_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_exponential_free: (a: number, b: number) => void;
export const exponential_new: (a: number) => [number, number, number];
export const exponential_mean: (a: number) => number;
export const exponential_variance: (a: number) => number;
export const exponential_std_dev: (a: number) => number;
export const exponential_pdf: (a: number, b: number) => number;
export const exponential_cdf: (a: number, b: number) => number;
export const exponential_quantile: (a: number, b: number) => number;
export const exponential_pdf_svg: (a: number, b: number, c: number, d: number) => [number, number];
export const __wbg_bernoulli_free: (a: number, b: number) => void;
export const bernoulli_new: (a: number) => [number, number, number];
export const bernoulli_p: (a: number) => number;
export const bernoulli_mean: (a: number) => number;
export const bernoulli_variance: (a: number) => number;
export const bernoulli_std_dev: (a: number) => number;
export const bernoulli_pmf: (a: number, b: number) => number;
export const bernoulli_cdf: (a: number, b: number) => number;
export const bernoulli_quantile: (a: number, b: number) => number;
export const bernoulli_pmf_svg: (a: number, b: number, c: number) => [number, number];
export const __wbg_poisson_free: (a: number, b: number) => void;
export const poisson_new: (a: number) => [number, number, number];
export const poisson_std_dev: (a: number) => number;
export const poisson_pmf: (a: number, b: number) => number;
export const poisson_log_pmf: (a: number, b: number) => number;
export const poisson_cdf: (a: number, b: number) => number;
export const poisson_quantile: (a: number, b: number) => number;
export const poisson_pmf_svg: (a: number, b: number, c: number) => [number, number];
export const studentt_df: (a: number) => number;
export const f_d2: (a: number) => number;
export const uniform_a: (a: number) => number;
export const normal_mean: (a: number) => number;
export const gamma_shape: (a: number) => number;
export const uniform_b: (a: number) => number;
export const exponential_lambda: (a: number) => number;
export const poisson_lambda: (a: number) => number;
export const poisson_mean: (a: number) => number;
export const poisson_variance: (a: number) => number;
export const cycliccode_k: (a: number) => number;
export const __wbg_polynomialf64_free: (a: number, b: number) => void;
export const polynomialf64_add: (a: number, b: number) => number;
export const polynomialf64_sub: (a: number, b: number) => number;
export const polynomialf64_mul: (a: number, b: number) => number;
export const polynomialf64_div: (a: number, b: number) => number;
export const __wbg_polynomialgf2_free: (a: number, b: number) => void;
export const polynomialgf2_add: (a: number, b: number) => number;
export const polynomialgf2_sub: (a: number, b: number) => number;
export const polynomialgf2_mul: (a: number, b: number) => number;
export const polynomialgf2_div: (a: number, b: number) => number;
export const __wbg_polynomialgf256_free: (a: number, b: number) => void;
export const polynomialgf256_add: (a: number, b: number) => number;
export const polynomialgf256_sub: (a: number, b: number) => number;
export const polynomialgf256_mul: (a: number, b: number) => number;
export const polynomialgf256_div: (a: number, b: number) => number;
export const __wbg_polynomialgfextgf2_free: (a: number, b: number) => void;
export const polynomialgfextgf2_add: (a: number, b: number) => number;
export const polynomialgfextgf2_sub: (a: number, b: number) => number;
export const polynomialgfextgf2_mul: (a: number, b: number) => number;
export const polynomialgfextgf2_div: (a: number, b: number) => number;
export const polynomialf64_divRem: (a: number, b: number) => [number, number];
export const polynomialgf2_divRem: (a: number, b: number) => [number, number];
export const polynomialgf256_divRem: (a: number, b: number) => [number, number];
export const polynomialgfextgf2_divRem: (a: number, b: number) => [number, number];
export const polynomialf64_new: (a: number, b: number) => number;
export const polynomialf64_deg: (a: number) => number;
export const polynomialf64_get: (a: number, b: number) => number;
export const polynomialf64_eval: (a: number, b: number) => number;
export const polynomialf64_differentiate: (a: number) => number;
export const polynomialf64_integrate: (a: number) => number;
export const polynomialf64_coeffs: (a: number) => [number, number];
export const polynomialf64_fromRoots: (a: number, b: number) => number;
export const polynomialf64_gcd: (a: number, b: number) => number;
export const polynomialf64_lcm: (a: number, b: number) => number;
export const polynomialf64_findRoots: (a: number) => [number, number];
export const polynomialf64_groupRoots: (a: number, b: number, c: number) => [number, number];
export const __wbg_wasmroot_free: (a: number, b: number) => void;
export const wasmroot_re: (a: number) => number;
export const wasmroot_im: (a: number) => number;
export const wasmroot_multiplicity: (a: number) => number;
export const polynomialf64_mulSimple: (a: number, b: number) => number;
export const polynomialf64_mulFft: (a: number, b: number) => number;
export const polynomialf64_mulAuto: (a: number, b: number) => number;
export const __wbg_rationalfunctionf64_free: (a: number, b: number) => void;
export const rationalfunctionf64_new: (a: number, b: number, c: number, d: number) => number;
export const rationalfunctionf64_numeratorCoeffs: (a: number) => [number, number];
export const rationalfunctionf64_denominatorCoeffs: (a: number) => [number, number];
export const rationalfunctionf64_simplify: (a: number) => void;
export const rationalfunctionf64_is_zero: (a: number) => number;
export const rationalfunctionf64_inverse: (a: number) => number;
export const rationalfunctionf64_eval: (a: number, b: number) => [number, number];
export const rationalfunctionf64_differentiate: (a: number) => number;
export const rationalfunctionf64_add: (a: number, b: number) => number;
export const rationalfunctionf64_sub: (a: number, b: number) => number;
export const rationalfunctionf64_mul: (a: number, b: number) => number;
export const rationalfunctionf64_div: (a: number, b: number) => number;
export const rationalfunctionf64_mulPoly: (a: number, b: number, c: number) => number;
export const rationalfunctionf64_divPoly: (a: number, b: number, c: number) => number;
export const rationalfunctionf64_findPoles: (a: number) => [number, number];
export const rationalfunctionf64_partialFractionExpansion: (a: number) => any;
export const polynomialgf2_new: (a: number, b: number) => number;
export const polynomialgf2_deg: (a: number) => number;
export const polynomialgf2_get: (a: number, b: number) => number;
export const polynomialgf2_eval: (a: number, b: number) => number;
export const polynomialgf2_coeffs: (a: number) => [number, number];
export const polynomialgf256_new: (a: number, b: number) => number;
export const polynomialgf256_deg: (a: number) => number;
export const polynomialgf256_get: (a: number, b: number) => number;
export const polynomialgf256_eval: (a: number, b: number) => number;
export const polynomialgf256_coeffs: (a: number) => [number, number];
export const polynomialgfextgf2_new: (a: number, b: number, c: number, d: number) => number;
export const polynomialgfextgf2_get: (a: number, b: number) => [number, number];
export const polynomialgfextgf2_eval: (a: number, b: number, c: number) => [number, number];
export const polynomialgfextgf2_coeffs: (a: number) => [number, number];
export const convolveNaiveF64: (a: number, b: number, c: number, d: number) => [number, number];
export const convolveFftF64: (a: number, b: number, c: number, d: number) => [number, number, number, number];
export const convolveAutoF64: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const defaultConvolutionThreshold: () => number;
export const dftComplexF64: (a: number, b: number) => [number, number];
export const iftComplexF64: (a: number, b: number) => [number, number];
export const binom: (a: number, b: number) => number;
export const stirling2: (a: number, b: number) => number;
export const fallingFactorialPoly: (a: number) => [number, number];
export const risingFactorialPoly: (a: number) => [number, number];
export const shiftPolyXPlusH: (a: number, b: number, c: number) => [number, number];
export const binomXPlusKChooseKPoly: (a: number) => [number, number];
export const discreteDiff: (a: number, b: number) => [number, number];
export const discreteSum: (a: number, b: number) => [number, number];
export const __wbg_closedform_free: (a: number, b: number) => void;
export const closedform_termsCount: (a: number) => number;
export const closedform_termPoly: (a: number, b: number) => [number, number, number, number];
export const closedform_termBase: (a: number, b: number) => [number, number, number, number];
export const closedform_term: (a: number, b: number) => [number, number];
export const closedform_toString: (a: number, b: number, c: number, d: number) => [number, number];
export const closedform_partialSum: (a: number) => number;
export const solveRecurrence: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number) => [number, number, number];
export const __wbg_generalterm_free: (a: number, b: number) => void;
export const generalterm_new: (a: number, b: number, c: number, d: number) => number;
export const generalterm_polynomial: (a: number) => [number, number];
export const generalterm_base: (a: number) => [number, number];
export const __wbg_recurrencerelation_free: (a: number, b: number) => void;
export const recurrencerelation_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const recurrencerelation_solve: (a: number) => number;
export const recurrencerelation_coeffs: (a: number) => [number, number];
export const partialSum: (a: number) => number;
export const polynomialgfextgf2_deg: (a: number) => number;
export const __wbg_discretetf_free: (a: number, b: number) => void;
export const discretetf_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const discretetf_sample_rate: (a: number) => number;
export const discretetf_set_sample_rate: (a: number, b: number) => void;
export const discretetf_b_coeffs: (a: number) => [number, number];
export const discretetf_a_coeffs: (a: number) => [number, number];
export const discretetf_is_stable: (a: number) => number;
export const discretetf_impulse_response: (a: number, b: number) => [number, number];
export const discretetf_step_response: (a: number, b: number) => [number, number];
export const discretetf_frequency_response_mag_phase: (a: number, b: number) => [number, number];
export const discretetf_bode_svg: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const discretetf_nyquist_svg: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const discretetf_series: (a: number, b: number) => number;
export const discretetf_parallel: (a: number, b: number) => number;
export const discretetf_feedback_unity: (a: number) => number;
export const discretetf_block_feedback_svg: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const __wbg_continuoustf_free: (a: number, b: number) => void;
export const continuoustf_new: (a: number, b: number, c: number, d: number) => number;
export const continuoustf_b_coeffs: (a: number) => [number, number];
export const continuoustf_a_coeffs: (a: number) => [number, number];
export const continuoustf_is_stable: (a: number) => number;
export const continuoustf_impulse_response: (a: number, b: number, c: number) => [number, number];
export const continuoustf_step_response: (a: number, b: number, c: number) => [number, number];
export const continuoustf_frequency_response_mag_phase: (a: number, b: number, c: number) => [number, number];
export const continuoustf_to_discrete_bilinear: (a: number, b: number) => number;
export const continuoustf_to_discrete_bilinear_prewarp: (a: number, b: number, c: number) => number;
export const continuoustf_bode_svg: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const continuoustf_nyquist_svg: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number];
export const continuoustf_block_feedback_svg: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const __wbg_continuouszpk_free: (a: number, b: number) => void;
export const continuouszpk_new: (a: number, b: number, c: number, d: number, e: number) => number;
export const continuouszpk_from_tf: (a: number) => number;
export const continuouszpk_to_tf: (a: number) => number;
export const continuouszpk_zeros_interleaved: (a: number) => [number, number];
export const continuouszpk_poles_interleaved: (a: number) => [number, number];
export const continuouszpk_gain: (a: number) => number;
export const __wbg_discretezpk_free: (a: number, b: number) => void;
export const discretezpk_new: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
export const discretezpk_from_tf: (a: number) => number;
export const discretezpk_to_tf: (a: number) => number;
export const discretezpk_zeros_interleaved: (a: number) => [number, number];
export const discretezpk_poles_interleaved: (a: number) => [number, number];
export const discretezpk_sample_rate: (a: number) => number;
export const __wbg_continuousss_free: (a: number, b: number) => void;
export const continuousss_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number) => number;
export const continuousss_from_tf_siso: (a: number, b: number, c: number, d: number) => number;
export const continuousss_to_tf_siso: (a: number) => [number, number];
export const continuousss_c2d_zoh: (a: number, b: number) => number;
export const continuousss_a_flat: (a: number) => [number, number];
export const continuousss_b_flat: (a: number) => [number, number];
export const continuousss_c_flat: (a: number) => [number, number];
export const continuousss_d_flat: (a: number) => [number, number];
export const continuousss_a_shape: (a: number) => [number, number];
export const continuousss_b_shape: (a: number) => [number, number];
export const continuousss_c_shape: (a: number) => [number, number];
export const continuousss_d_shape: (a: number) => [number, number];
export const __wbg_discretess_free: (a: number, b: number) => void;
export const discretess_to_tf_siso: (a: number) => [number, number];
export const discretess_a_flat: (a: number) => [number, number];
export const discretess_b_flat: (a: number) => [number, number];
export const discretess_c_flat: (a: number) => [number, number];
export const discretess_d_flat: (a: number) => [number, number];
export const discretess_a_shape: (a: number) => [number, number];
export const discretess_b_shape: (a: number) => [number, number];
export const discretess_c_shape: (a: number) => [number, number];
export const discretess_d_shape: (a: number) => [number, number];
export const __wbg_wasmlinearmodel_free: (a: number, b: number) => void;
export const wasmlinearmodel_solveLinearSystem: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number, number];
export const wasmlinearmodel_ridgeRegression: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number, number];
export const wasmlinearmodel_lassoRegression: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number, number, number];
export const discretezpk_gain: (a: number) => number;
export const discretess_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number) => number;
export const __wbg_wasmgf2_free: (a: number, b: number) => void;
export const wasmgf2_inv: (a: number) => [number, number, number];
export const wasmgf2_add: (a: number, b: number) => number;
export const wasmgf2_sub: (a: number, b: number) => number;
export const wasmgf2_mul: (a: number, b: number) => number;
export const wasmgf2_div: (a: number, b: number) => [number, number, number];
export const wasmgf2_neg: (a: number) => number;
export const __wbg_wasmgf3_free: (a: number, b: number) => void;
export const wasmgf3_inv: (a: number) => [number, number, number];
export const wasmgf3_add: (a: number, b: number) => number;
export const wasmgf3_sub: (a: number, b: number) => number;
export const wasmgf3_mul: (a: number, b: number) => number;
export const wasmgf3_div: (a: number, b: number) => [number, number, number];
export const wasmgf3_neg: (a: number) => number;
export const __wbg_wasmgf256_free: (a: number, b: number) => void;
export const wasmgf256_is_zero: (a: number) => number;
export const wasmgf256_is_one: (a: number) => number;
export const wasmgf256_toU8: (a: number) => number;
export const wasmgf256_inv: (a: number) => [number, number, number];
export const wasmgf256_add: (a: number, b: number) => number;
export const wasmgf256_sub: (a: number, b: number) => number;
export const wasmgf256_mul: (a: number, b: number) => number;
export const wasmgf256_new: (a: number) => number;
export const wasmgf256_coeffs: (a: number) => [number, number];
export const wasmgf256_fromCoeffs: (a: number, b: number) => number;
export const wasmgf256_modulus: () => [number, number];
export const __wbg_wasmgfextgf2_free: (a: number, b: number) => void;
export const wasmgfextgf2_inv: (a: number) => [number, number, number];
export const wasmgfextgf2_add: (a: number, b: number) => number;
export const wasmgfextgf2_sub: (a: number, b: number) => number;
export const wasmgfextgf2_mul: (a: number, b: number) => number;
export const wasmgfextgf2_new: (a: number, b: number, c: number, d: number) => number;
export const wasmgfextgf2_fromBase: (a: number, b: number, c: number) => number;
export const wasmgfextgf2_coeffs: (a: number) => [number, number];
export const wasmgfextgf2_px: (a: number) => [number, number];
export const wasmgf256_div: (a: number, b: number) => [number, number, number];
export const wasmgf256_neg: (a: number) => number;
export const wasmgfextgf2_div: (a: number, b: number) => [number, number, number];
export const wasmgfextgf2_neg: (a: number) => number;
export const __wbg_gf2_free: (a: number, b: number) => void;
export const gf2_new: (a: bigint) => number;
export const gf2_modulus: () => number;
export const gf2_inv: (a: number) => [number, number, number];
export const gf2_zero: () => number;
export const gf2_one: () => number;
export const gf2_add: (a: number, b: number) => number;
export const gf2_sub: (a: number, b: number) => number;
export const gf2_mul: (a: number, b: number) => number;
export const gf2_div: (a: number, b: number) => [number, number, number];
export const gf2_neg: (a: number) => number;
export const gf2_value: (a: number) => bigint;
export const gf2_is_zero: (a: number) => number;
export const gf2_is_one: (a: number) => number;
export const __wbg_gf3_free: (a: number, b: number) => void;
export const gf3_new: (a: bigint) => number;
export const gf3_modulus: () => number;
export const gf3_inv: (a: number) => [number, number, number];
export const gf3_add: (a: number, b: number) => number;
export const gf3_sub: (a: number, b: number) => number;
export const gf3_mul: (a: number, b: number) => number;
export const gf3_div: (a: number, b: number) => [number, number, number];
export const gf3_neg: (a: number) => number;
export const __wbg_gfextgf2_free: (a: number, b: number) => void;
export const gfextgf2_new: (a: number, b: number, c: number, d: number) => number;
export const gfextgf2_fromBase: (a: number, b: number, c: number) => number;
export const gfextgf2_inv: (a: number) => [number, number, number];
export const gfextgf2_zero: () => number;
export const gfextgf2_one: () => number;
export const gfextgf2_add: (a: number, b: number) => number;
export const gfextgf2_sub: (a: number, b: number) => number;
export const gfextgf2_mul: (a: number, b: number) => number;
export const gfextgf2_div: (a: number, b: number) => [number, number, number];
export const gfextgf2_neg: (a: number) => number;
export const gfextgf2_coeffs: (a: number) => [number, number];
export const gfextgf2_px: (a: number) => [number, number];
export const __probe: () => number;
export const __wbg_matrix_free: (a: number, b: number) => void;
export const matrix_new: (a: number, b: number, c: number, d: number) => [number, number, number];
export const matrix_with_default: (a: number, b: number) => number;
export const matrix_zeros: (a: number, b: number) => number;
export const matrix_identity: (a: number) => number;
export const matrix_rows: (a: number) => number;
export const matrix_cols: (a: number) => number;
export const matrix_is_square: (a: number) => number;
export const matrix_transpose: (a: number) => number;
export const matrix_trace: (a: number) => [number, number, number];
export const matrix_determinant: (a: number) => [number, number, number];
export const matrix_rank: (a: number) => [number, number, number];
export const matrix_inverse: (a: number) => number;
export const matrix_frobenius_norm: (a: number) => number;
export const matrix_expm: (a: number) => number;
export const matrix_qr_decomposition: (a: number) => [number, number, number];
export const matrix_svd: (a: number) => [number, number, number];
export const matrix_eigen_decomposition: (a: number) => [number, number, number];
export const matrix_cholesky: (a: number) => [number, number, number];
export const matrix_pinv: (a: number) => [number, number, number];
export const matrix_data: (a: number) => [number, number];
export const __wbg_vector_free: (a: number, b: number) => void;
export const vector_new: (a: number, b: number) => number;
export const vector_zeros: (a: number) => number;
export const vector_ones: (a: number) => number;
export const vector_dim: (a: number) => number;
export const vector_is_empty: (a: number) => number;
export const vector_dot: (a: number, b: number) => number;
export const vector_argmax: (a: number) => number;
export const vector_argmin: (a: number) => number;
export const vector_max: (a: number) => [number, number];
export const vector_min: (a: number) => [number, number];
export const vector_norm: (a: number) => number;
export const vector_normalize: (a: number) => number;
export const vector_cosine_similarity: (a: number, b: number) => number;
export const vector_mean: (a: number) => [number, number];
export const vector_std: (a: number) => number;
export const vector_linspace: (a: number, b: number, c: number) => [number, number, number];
export const vector_sum: (a: number) => number;
export const vector_transpose: (a: number) => number;
export const vector_to_column_matrix: (a: number) => number;
export const vector_to_row_matrix: (a: number) => number;
export const vector_data: (a: number) => [number, number];
export const solveLinearSystem: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number, number, number];
export const ridgeRegression: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number, number];
export const lassoRegression: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number, number, number];
export const logisticFit: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number, number, number];
export const logisticPredictProba: (a: number, b: number, c: number, d: number, e: number) => [number, number, number];
export const gmmFit: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number, number, number];
export const gmmPredictProba: (a: number, b: number, c: number, d: number, e: number) => [number, number, number, number];
export const bayesianLinearPosterior: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number) => [number, number, number, number];
export const kalmanPredict: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number, number, number];
export const kalmanUpdate: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number) => [number, number, number, number];
export const init: () => void;
export const wasmgf3_is_zero: (a: number) => number;
export const wasmgf3_is_one: (a: number) => number;
export const wasmgf2_is_zero: (a: number) => number;
export const wasmgf2_is_one: (a: number) => number;
export const gf3_is_zero: (a: number) => number;
export const gf3_is_one: (a: number) => number;
export const wasmgfextgf2_zero: () => number;
export const wasmgfextgf2_one: () => number;
export const wasmgf256_zero: () => number;
export const wasmgf256_one: () => number;
export const wasmgf256_value: (a: number) => number;
export const wasmgf2_new: (a: bigint) => number;
export const wasmgf3_zero: () => number;
export const wasmgf3_one: () => number;
export const wasmgf2_zero: () => number;
export const wasmgf2_one: () => number;
export const gf3_zero: () => number;
export const gf3_one: () => number;
export const wasmgfextgf2_is_zero: (a: number) => number;
export const wasmgfextgf2_is_one: (a: number) => number;
export const wasmgf2_modulus: () => number;
export const wasmgf3_modulus: () => number;
export const matrix_columns: (a: number) => number;
export const wasmgf3_new: (a: bigint) => number;
export const vector_len: (a: number) => number;
export const wasmgf3_value: (a: number) => bigint;
export const wasmgf2_value: (a: number) => bigint;
export const gf3_value: (a: number) => bigint;
export const nt_factor_u64: (a: bigint) => [number, number];
export const nt_factor_bigint_str: (a: number, b: number) => [number, number];
export const erf: (a: number) => number;
export const erfc: (a: number) => number;
export const erfInv: (a: number) => number;
export const gamma: (a: number) => number;
export const logGamma: (a: number) => number;
export const regularizedGamma: (a: number, b: number) => number;
export const beta: (a: number, b: number) => number;
export const logBeta: (a: number, b: number) => number;
export const regularizedBeta: (a: number, b: number, c: number) => number;
export const __wbg_wasmsignal_free: (a: number, b: number) => void;
export const wasmsignal_new: (a: number, b: number, c: number) => number;
export const wasmsignal_data: (a: number) => [number, number];
export const wasmsignal_sample_rate: (a: number) => number;
export const wasmsignal_len: (a: number) => number;
export const wasmsignal_dft: (a: number) => number;
export const wasmsignal_convolve: (a: number, b: number) => number;
export const wasmsignal_apply_fir: (a: number, b: number, c: number) => number;
export const wasmsignal_downsample: (a: number, b: number, c: number) => number;
export const wasmsignal_upsample: (a: number, b: number, c: number) => number;
export const wasmsignal_resample: (a: number, b: number, c: number, d: number) => number;
export const wasmsignal_decimate: (a: number, b: number) => number;
export const wasmsignal_expand: (a: number, b: number) => number;
export const wasmsignal_save_svg_simple: (a: number, b: number, c: number) => [number, number];
export const wasmsignal_save_svg_with_axes: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const __wbg_wasmspectrum_free: (a: number, b: number) => void;
export const wasmspectrum_data_interleaved: (a: number) => [number, number];
export const wasmspectrum_len: (a: number) => number;
export const wasmspectrum_ift: (a: number) => number;
export const wasmspectrum_magnitude_db_svg: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const window_hann: (a: number) => [number, number];
export const window_hamming: (a: number) => [number, number];
export const window_blackman: (a: number) => [number, number];
export const window_rectangular: (a: number) => [number, number];
export const window_kaiser: (a: number, b: number) => [number, number];
export const sp_design_fir_lowpass: (a: number, b: number) => [number, number];
export const sp_design_fir_highpass: (a: number, b: number) => [number, number];
export const sp_design_fir_bandpass: (a: number, b: number, c: number) => [number, number];
export const sp_design_fir_bandstop: (a: number, b: number, c: number) => [number, number];
export const sp_design_iir_butter_lowpass: (a: number, b: number, c: number) => number;
export const sp_design_iir_butter_highpass: (a: number, b: number, c: number) => number;
export const sp_design_iir_butter_bandpass: (a: number, b: number, c: number, d: number) => number;
export const sp_design_iir_butter_bandstop: (a: number, b: number, c: number, d: number) => number;
export const sp_design_iir_cheby1_lowpass: (a: number, b: number, c: number, d: number) => number;
export const sp_design_iir_cheby2_lowpass: (a: number, b: number, c: number, d: number) => number;
export const __wbg_wasmlms_free: (a: number, b: number) => void;
export const wasmlms_new: (a: number, b: number) => number;
export const wasmlms_process_sample: (a: number, b: number, c: number) => [number, number];
export const wasmlms_process_series: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const __wbg_wasmnlms_free: (a: number, b: number) => void;
export const wasmnlms_new: (a: number, b: number, c: number) => number;
export const wasmnlms_process_sample: (a: number, b: number, c: number) => [number, number];
export const wasmnlms_process_series: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const img_convolve2d_f32_simple: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number];
export const img_convolve2d_f32: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number];
export const img_convolve2d_u8: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number];
export const img_dft2d: (a: number, b: number, c: number, d: number) => [number, number];
export const img_idft2d: (a: number, b: number, c: number, d: number) => [number, number];
export const img_fftshift: (a: number, b: number, c: number, d: number) => [number, number];
export const img_magnitude: (a: number, b: number, c: number, d: number) => [number, number];
export const img_gaussian_blur_f32: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const img_gaussian_blur_u8: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const img_box_filter_f32: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const img_box_filter_u8: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const img_unsharp_mask_f32: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number];
export const img_unsharp_mask_u8: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number];
export const img_sobel_magnitude_f32: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const img_sobel_magnitude_u8: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const img_laplacian_f32: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const img_laplacian_u8: (a: number, b: number, c: number, d: number, e: number) => [number, number];
export const img_median_filter_f32: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const img_median_filter_u8: (a: number, b: number, c: number, d: number, e: number, f: number) => [number, number];
export const img_bilateral_filter_f32: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number];
export const img_bilateral_filter_u8: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number) => [number, number];
export const rgb_u8_to_gray_f64: (a: number, b: number, c: number, d: number) => [number, number];
export const rgba_u8_to_gray_f64: (a: number, b: number, c: number, d: number) => [number, number];
export const gray_f64_to_rgba_u8: (a: number, b: number, c: number, d: number) => [number, number];
export const u8_to_gray_f64: (a: number, b: number) => [number, number];
export const gray_f64_to_u8_clamped: (a: number, b: number) => [number, number];
export const img_convolve2d_f32_io: (a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number) => [number, number];
export const img_gaussian_blur_f32_io: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => [number, number];
export const wasmspectrum_new: (a: number, b: number, c: number) => number;
export const wasmspectrum_sample_rate: (a: number) => number;
export const __wbindgen_exn_store: (a: number) => void;
export const __externref_table_alloc: () => number;
export const __wbindgen_export_2: WebAssembly.Table;
export const __wbindgen_free: (a: number, b: number, c: number) => void;
export const __wbindgen_malloc: (a: number, b: number) => number;
export const __wbindgen_realloc: (a: number, b: number, c: number, d: number) => number;
export const __externref_table_dealloc: (a: number) => void;
export const __externref_drop_slice: (a: number, b: number) => void;
export const __wbindgen_start: () => void;
